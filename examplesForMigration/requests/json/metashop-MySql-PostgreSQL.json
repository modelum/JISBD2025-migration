{
  "sourceDatabaseType": "MySQL",
  "targetDatabaseType": "PostgreSQL",
  "applicationRequirements": "The application is an e-commerce platform that allows customers to browse products, place orders, and manage their payments.\nThe most frequent queries in the system include:\n\n- Listing (ID, name, price, stock) of 'Laptop' category products priced under 1500â‚¬ and manufactured by 'LG'.\n\n```sql\nSELECT product_id, name, price, stock\nFROM PRODUCT\nWHERE category IN (SELECT category_id\n                   FROM PRODUCT_CATEGORY\n                   WHERE name = 'Laptop')\n  AND price < 1500 and manufacturer = 'LG';\n```\n\n- Retrieving orders placed by customer 'U2929' between 2021-11-01 and 2022-08-31.\n\n```sql\nSELECT * \nFROM CUSTOMER_ORDER\nWHERE customer = 'U2929'\n  AND order_date >= '2021-11-01' AND order_date <= '2022-08-31';\n```\n\n- Getting the products purchased by customer 'U2929' in the same date range.\n\n```sql\nSELECT product_id, name, price\nFROM PRODUCT\nWHERE product_id IN (SELECT product\n                     FROM ORDER_ITEM\n                     WHERE order_id IN (SELECT order_id\n                                        FROM CUSTOMER_ORDER\n                                        WHERE customer = 'U2929'\n                                        AND order_date >= '2021-11-01' \n                                        AND order_date <= '2022-08-31'));\n```\n\n- Finding the top 10 best-selling products per country.\n\n```sql\nSELECT P.product_id, P.name, S.country, S.total_sales\nFROM PRODUCT P JOIN (SELECT I.product prod, U.country, SUM(I.quantity) total_sales\n                     FROM CUSTOMER_ORDER O JOIN CUSTOMER U ON O.customer = U.customer_id\n                                   JOIN ORDER_ITEM I ON O.order_id = I.order_id\n                     GROUP BY I.product, U.country) S\n               ON P.product_id = S.prod\nORDER BY S.country, S.total_sales DESC\nLIMIT 10;\n```\n\n- Identifying customers whose direct or indirect referrals have rated the store poorly (1 or 2 stars).\n\n```sql\nSELECT recommendedby \nFROM CUSTOMER\nWHERE shop_opinion < 3;\n```\n\n- Listing direct and indirect recommendations of a customer.\n\n```sql\nSELECT customer_id, name, country\nFROM CUSTOMER\nWHERE recommendedby = 'U2929';\n```\n\n- Retrieving products similar to those bought in the latest order of a customer.\n\n```sql\nSELECT product2\nFROM SIMILAR_PRODUCT\nWHERE product1 IN (SELECT product\n                   FROM ORDER_ITEM\n                   WHERE order_id IN (SELECT order_id\n                                      FROM CUSTOMER_ORDER O1\n                                      WHERE customer = 'U2929' \n                                      AND order_date = (SELECT MAX(order_date) \n                                                        FROM CUSTOMER_ORDER \n                                                        WHERE O2.customer = O1.customer)));\n```\n",
  "applicationArchitecture": "The application is a monolithic web application with a backend in Java using Spring Boot.",
  "underlyingTechnologies": "The backend is developed in Java and Spring Boot, with PostgreSQL as the target database.",
  "databaseSchema": "CREATE TABLE CUSTOMER (\n    customer_id CHAR(4) PRIMARY KEY,\n    name VARCHAR(30) NOT NULL,\n    email VARCHAR(40) UNIQUE NOT NULL,\n    password VARCHAR(20) NOT NULL,\n    shipping_addr VARCHAR(60),\n    country VARCHAR(30) NOT NULL,\n    register_date DATE NOT NULL,\n    recommendedby CHAR(4) REFERENCES CUSTOMER(customer_id),\n    shop_opinion INTEGER CHECK (shop_opinion BETWEEN 1 AND 5) DEFAULT 3,\n    ispremium BOOLEAN NOT NULL DEFAULT FALSE,\n    premium_fee DECIMAL(6,2),\n    premium_date DATE\n);\n\nCREATE TABLE CUSTOMER_PAYMENT_METHOD (\n    customer CHAR(4) NOT NULL REFERENCES CUSTOMER(customer_id),\n    payment_method VARCHAR(20) NOT NULL CHECK (payment_method IN ('VISA', 'MASTERCARD', '4B', 'EURO6000', 'PAYPAL')),\n    PRIMARY KEY (customer, payment_method)\n);\n\nCREATE TABLE PRODUCT_CATEGORY (\n    category_id CHAR(10) PRIMARY KEY,\n    description VARCHAR(60)\n);\n\nCREATE TABLE PRODUCT (\n    product_id CHAR(10) PRIMARY KEY,\n    name VARCHAR(30) NOT NULL,\n    price DECIMAL(6,2) NOT NULL CHECK (price > 0),\n    description VARCHAR(60),\n    imageURL VARCHAR(60),\n    manufacturer VARCHAR(30) NOT NULL,\n    stock INTEGER NOT NULL CHECK (stock >= 0),\n    category CHAR(10) NOT NULL REFERENCES PRODUCT_CATEGORY(category_id)\n);\n\nCREATE TABLE SIMILAR_PRODUCT (\n    product1 CHAR(10) NOT NULL REFERENCES PRODUCT(product_id),\n    product2 CHAR(10) NOT NULL REFERENCES PRODUCT(product_id),\n    PRIMARY KEY (product1, product2)\n);\n\nCREATE TABLE CUSTOMER_ORDER (\n    order_id SERIAL PRIMARY KEY,\n    order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    customer CHAR(4) NOT NULL REFERENCES CUSTOMER(customer_id),\n    total DECIMAL(7,2) NOT NULL CHECK (total >= 0)\n);\n\nCREATE TABLE ORDER_ITEM (\n    order_id INTEGER NOT NULL REFERENCES CUSTOMER_ORDER(order_id),\n    item INTEGER NOT NULL,\n    product CHAR(10) NOT NULL REFERENCES PRODUCT(product_id),\n    quantity INTEGER NOT NULL CHECK (quantity > 0),\n    subtotal DECIMAL(6,2) NOT NULL CHECK (subtotal >= 0),\n    PRIMARY KEY (order_id, item)\n);\n\nCREATE TABLE DISCOUNT (\n    discount_id SERIAL PRIMARY KEY,\n    description VARCHAR(60) NOT NULL,\n    discount_rate DECIMAL(4,2) NOT NULL CHECK (discount_rate > 0)\n);\n\nCREATE TABLE ORDER_DISCOUNT (\n    order_id INTEGER NOT NULL REFERENCES CUSTOMER_ORDER(order_id),\n    discount INTEGER NOT NULL REFERENCES DISCOUNT(discount_id),\n    PRIMARY KEY (order_id, discount)\n);",
  "migrationRequirements": "Ensure compatibility between MySQL and PostgreSQL data types.\nConvert `AUTO_INCREMENT` fields to `SERIAL` in PostgreSQL.\nReplace `DATETIME` with `TIMESTAMP` where needed.\nModify `BOOLEAN` fields to ensure PostgreSQL compatibility (`TRUE`/`FALSE`).\nEnsure foreign keys maintain referential integrity.\nMigrate queries:\n  - Convert `LIMIT 10` queries into appropriate window functions when necessary.\n  - Adapt JOIN conditions and subqueries to PostgreSQL-specific syntax.\n  - Convert the `shop_opinion` field's check constraints to PostgreSQL syntax.\n  - Ensure that recursive queries (such as recommendations) are handled efficiently.\nImport data ensuring sequence values match expected IDs to prevent conflicts in SERIAL fields."
}
