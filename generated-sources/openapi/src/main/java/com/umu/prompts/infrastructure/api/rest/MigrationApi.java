/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.umu.prompts.infrastructure.api.rest;

import com.umu.prompts.infrastructure.api.rest.model.MigrationRequestDTO;
import com.umu.prompts.infrastructure.api.rest.model.MigrationResponseDTO;
import com.umu.prompts.infrastructure.api.rest.model.ProblemDetail;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-11T17:59:49.331557300+01:00[Europe/Madrid]", comments = "Generator version: 7.7.0")
@Validated
@Controller
@Tag(name = "Migration", description = "This is the API for My Thesis for Database Migrations with AI")
public interface MigrationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/migrations : Migrate a database from one type to another using a LLM tool
     *
     * @param migrationRequestDTO  (required)
     * @return Migration request received and processed successfully (status code 200)
     *         or Bad request. One or more parameters has an invalid value. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "migrateDatabase",
        summary = "Migrate a database from one type to another using a LLM tool",
        tags = { "Migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Migration request received and processed successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MigrationResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request. One or more parameters has an invalid value.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/migrations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MigrationResponseDTO> _migrateDatabase(
        @Parameter(name = "MigrationRequestDTO", description = "", required = true) @Valid @RequestBody MigrationRequestDTO migrationRequestDTO
    ) {
        return migrateDatabase(migrationRequestDTO);
    }

    // Override this method
    default  ResponseEntity<MigrationResponseDTO> migrateDatabase(MigrationRequestDTO migrationRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadataForDataMigration\" : \"metadataForDataMigration\", \"metadataForMigrateSchema\" : \"metadataForMigrateSchema\", \"guidelinesForValidateSchema\" : \"guidelinesForValidateSchema\", \"scriptForDataValidation\" : \"scriptForDataValidation\", \"scriptForDataMigration\" : \"scriptForDataMigration\", \"metadataForDataValidation\" : \"metadataForDataValidation\", \"scriptForMigrateSchema\" : \"scriptForMigrateSchema\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"title\" : \"Bad Request\", \"status\" : 400, \"detail\" : \"Requested service not available\", \"instance\" : \"/migrations\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"title\" : \"Bad Request\", \"status\" : 400, \"detail\" : \"Requested service not available\", \"instance\" : \"/migrations\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
