openapi: 3.0.3
info:
  title: Migration API
  version: 1.0.0
tags:
  - name: Migration
    description: This is the API for My Thesis for Database Migrations with AI
paths:
  /api/v1/migrations:
    post:
      tags:
        - Migration
      summary: Migrate a database from one type to another using a LLM tool
      operationId: migrateDatabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrationRequestDTO"
      responses:
        "200":
          description: Migration request received and processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationResponseDTO"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    DataBaseTypeDTO:
      type: string
      description: The type of the database
      enum:
        - MySQL
        - PostgreSQL
        - SQLite
        - OracleDB
        - MicrosoftSQLServer
        - MariaDB
        - IBMDB2
        - AmazonRDS
        - GoogleCloudSQL
        - SAPHana
        - MongoDB
        - CouchDB
        - Cassandra
        - Redis
        - Couchbase
        - DynamoDB
        - Neo4j
        - Riak
        - HBase
        - Elasticsearch
        - InfluxDB
        - TimescaleDB
        - OpenTSDB
        - db4o
        - ObjectDB
        - GoogleSpanner
        - CockroachDB
        - TiDB
        - Memcached
        - BerkeleyDB
        - ScyllaDB
        - ArangoDB
        - OrientDB
        - MarkLogic
        - GoogleBigtable
      example: MySQL
    MigrationRequestDTO:
      type: object
      properties:
        sourceDatabaseType:
          $ref: "#/components/schemas/DataBaseTypeDTO"
        targetDatabaseType:
          $ref: "#/components/schemas/DataBaseTypeDTO"
        applicationRequirements:
          type: string
          description: The requirements of the application as the operations that the application supports and the queries that it executes
        applicationArchitecture:
          type: string
          description: The architecture of the application
        underlyingTechnologies:
          type: string
          description: The technologies used to build the application
        databaseSchema:
          type: string
          description: The schema of the database.
        databaseDocuments:
          type: string
          description: examples of the documents in the database
        migrationRequirements:
          type: string
          description: The requirements to migrate the database
      required:
        - sourceDatabaseType
        - targetDatabaseType
        - databaseSchema
        - applicationRequirements
        - applicationArchitecture
        - underlyingTechnologies
        - migrationRequirements
      example:
        sourceDatabaseType: MySQL
        targetDatabaseType: MongoDB
        applicationRequirements: "
          The application is a simple event management system that allows users to create events and register attendees.
          The operations supported by the application are:

          - Create an event
          INSERT INTO evento (nombre, fecha, ubicacion) VALUES ('Conferencia Tech', '2025-03-15 10:00:00', 'Centro de Convenciones');

          - Register an attendee
          INSERT INTO asistente (nombre, email, evento_id) VALUES ('Juan Pérez', 'juan.perez@example.com', 1);

          - Count how many attendees are registered for each event
          SELECT e.nombre AS evento, COUNT(a.id) AS total_asistentes
          FROM evento e
          LEFT JOIN asistente a ON e.id = a.evento_id
          GROUP BY e.id, e.nombre;

          - Get a list of events without attendees
          SELECT e.id, e.nombre, e.fecha, e.ubicacion
          FROM evento e
          LEFT JOIN asistente a ON e.id = a.evento_id
          WHERE a.id IS NULL;
          "
        applicationArchitecture: "The application is a monolithic application."
        underlyingTechnologies: "The application is built with Java and Spring Boot."
        databaseSchema: "CREATE DATABASE eventos_db;
          USE eventos_db;

          -- Tabla de eventos
          CREATE TABLE evento (
          id INT PRIMARY KEY AUTO_INCREMENT,
          nombre VARCHAR(255) NOT NULL,
          fecha DATETIME NOT NULL,
          ubicacion VARCHAR(255) NOT NULL
          );

          -- Tabla de asistentes
          CREATE TABLE asistente (
          id INT PRIMARY KEY AUTO_INCREMENT,
          nombre VARCHAR(255) NOT NULL,
          email VARCHAR(255) UNIQUE NOT NULL,
          evento_id INT NOT NULL,
          FOREIGN KEY (evento_id) REFERENCES evento(id) ON DELETE CASCADE
          );"
        migrationRequirements:
          "Seleccionar los registros de las tablas 'evento' y 'asistente'.
          Convertir la columna 'id' en '_id' para alinearla con MongoDB.
          La columna 'fecha' en 'evento' debe convertirse a formato ISODate.
          En la tabla 'asistente', el campo 'evento_id' debe mapearse como una referencia a '_id' en la colección 'evento'
          Insertar los eventos en la colección 'evento' con '_id' como ObjectId y 'fecha' en formato ISODate.
          Insertar los asistentes en la colección 'asistente', asegurando que 'evento_id' almacene una referencia a '_id' en 'evento'.
          Mantener la integridad referencial manualmente, ya que MongoDB no impone claves foráneas automáticamente."
    MigrationResponseDTO:
      type: object
      properties:
        scriptForMigrateSchema:
          type: string
          description: The script to migrate the schema
        metadataForMigrateSchema:
          type: string
          description: Information about the schema migration
        guidelinesForValidateSchema:
          type: string
          description: Guidelines to validate the schema migration
        scriptForDataMigration:
          type: string
          description: The script to migrate the data stored in the database
        metadataForDataMigration:
            type: string
            description: Information about the data migration
        scriptForDataValidation:
          type: string
          description: The script to validate the data migration
        metadataForDataValidation:
            type: string
            description: Information about the data validation
      required:
        - scriptForMigrateSchema
        - metadataForMigrateSchema
        - guidelinesForValidateSchema
        - scriptForDataMigration
        - metadataForDataMigration
        - scriptForDataValidation
        - metadataForDataValidation
    ProblemDetail:
      description: A problemDetail Details object
      type: object
      additionalProperties: true
      properties:
        title:
          type: string
          maxLength: 500
          description: A short summary of the problem
          example: Internal Server Error
        status:
          type: integer
          format: int32
          description: The HTTP Status Code generated by the origin server for this occurrence of the problem
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 500
        detail:
          type: string
          maxLength: 5000
          description: A human-readable explanation specific to this occurrence of the problem
          example: Requested service not available
        instance:
          type: string
          maxLength: 2000
          description: URI reference that identifies the specific occurrence of the problem
          example: /migrations
      example:
        title: Bad Request
        status: 400
        detail: Requested service not available
        instance: /migrations
  responses:
    BadRequest:
      description: "Bad request. One or more parameters has an invalid value."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            type: about:blank
            title: Bad Request
            status: 400
            detail: The request could not be understood by the server due to malformed syntax
            instance: /migrations
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            type: about:blank
            title: Not Found
            status: 404
            detail: The requested resource could not be found
            instance: /migrations
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            type: about:blank
            title: Internal Server Error
            status: 500
            detail: The server encountered an unexpected condition
            instance: /iopcljava/v1/migrations
